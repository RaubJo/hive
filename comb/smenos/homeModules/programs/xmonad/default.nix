{ config, pkgs, ... }:

{
  xsession = {
    enable = true;
    initExtra = "xrandr --dpi 90";
    windowManager = {
      awesome.enable = false;
      xmonad.enable = true;
      xmonad.enableContribAndExtras = true;
      xmonad.extraPackages = hpkgs: [
        hpkgs.xmonad
        hpkgs.xmonad-contrib
        hpkgs.xmonad-extras
      ];
      xmonad.config = pkgs.writeText "xmonad.hs" ''
        -- Joseph Raub's Xmonad Config: 11-6-21        generated by home-manager
        -- IMPORTS -------------------------------------------------------------
        import XMonad
        import System.IO (hPutStrLn)
        import System.Exit (exitSuccess)
        import qualified XMonad.StackSet as W
        import XMonad.ManageHook

        import XMonad.Actions.GridSelect
        import XMonad.Actions.CycleWS

        import XMonad.Util.SpawnOnce
        import XMonad.Util.Run
        import XMonad.Util.EZConfig (additionalKeysP)
        import XMonad.Util.NamedScratchpad

        import XMonad.Hooks.ManageDocks
        import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..))
        import XMonad.Hooks.EwmhDesktops
        import XMonad.Hooks.ManageHelpers

        import Data.Maybe (fromJust)
        import Data.Maybe (isJust)
        import Data.Monoid
        import qualified Data.Map as M

        -- Layouts
        import XMonad.Layout.ThreeColumns
        import XMonad.Layout.NoBorders (noBorders, smartBorders)
        import XMonad.Layout.Fullscreen (fullscreenFull, fullscreenSupport)
        import XMonad.Layout.TwoPane (TwoPane(..))
        import XMonad.Layout.Tabbed (simpleTabbed)
        import XMonad.Layout.Named
        import XMonad.Layout.Spacing

        -- Modifiers
        import XMonad.Layout.Magnifier as Mag

        -- Variables: ----------------------------------------------------------
        myFont :: String
        myFont = "xft:Fira Code Nerd Font:regular:size=11:antialias=true:hinting=true"

        myModMask :: KeyMask
        myModMask = mod4Mask -- Set to SUPER key

        myTerminal :: String
        myTerminal = "alacritty"

        myBrowser :: String
        myBrowser = "qutebrowser"

        myEditor :: String
        myEditor = "emacsclient -c -a 'emacs'"
        -- myEditor = myTerminal ++ "-e nvim" -- sets neovim as editor

        myFileBrowser :: String
        myFileBrowser = "pcmanfm"

        myBorderWidth :: Dimension
        myBorderWidth = 0

        myNormalBorderColor :: String
        myNormalBorderColor = "#2e3440"

        myFocusedBorderColor :: String
        myFocusedBorderColor = "#5e81ac"

        windowCount :: X (Maybe String)
        windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset

        myWorkspaces    = ["1","2","3","4","5","6","7","8","9"]
        -- Whether focus follows the mouse pointer.
        myFocusFollowsMouse :: Bool
        myFocusFollowsMouse = True

        -- Whether clicking on a window to focus also passes the click to the window
        myClickJustFocuses :: Bool
        myClickJustFocuses = False

        -- Theming for xmobar output
        -- Workspace presently in
        logHookPresentColor :: String
        logHookPresentColor = "#${config.colorScheme.colors.base0B}"

        -- WS that have windows but are not being viewed
        logHookHiddenColor :: String
        logHookHiddenColor = "#${config.colorScheme.colors.base0C}"

        -- WS that are not the focus but are viewed on another monitor
        logHookVisibleColor :: String
        logHookVisibleColor = "#${config.colorScheme.colors.base0B}"

        -- WS that have no windows
        logHookEmptyColor :: String
        logHookEmptyColor = "#${config.colorScheme.colors.base04}"

        logHookUrgentColor :: String
        logHookUrgentColor = "#${config.colorScheme.colors.base09}"

        logHookTitleColor :: String
        logHookTitleColor = "#${config.colorScheme.colors.base04}"

        -- GridSelect ----------------------------------------------------------
        myColorizer :: Window -> Bool -> X (String, String)
        myColorizer = colorRangeFromClassName
                           (0x28,0x2c,0x34) -- lowest inactive bg
                           (0x28,0x2c,0x34) -- highest inactive bg
                           (0xc7,0x92,0xea) -- active bg
                           (0xc0,0xa7,0x9a) -- inactive fg
                           (0x28,0x2c,0x34) -- active fg

        -- GS menu layout
        mygridConfig :: p -> GSConfig Window
        mygridConfig colorizer = (buildDefaultGSConfig myColorizer)
          { gs_cellheight   = 40
          , gs_cellwidth    = 200
          , gs_cellpadding  = 6
          , gs_originFractX = 0.5
          , gs_originFractY = 0.5
          , gs_font         = myFont
          }

        spawnSelected' :: [(String, String)] -> X ()
        spawnSelected' lst = gridselect conf lst >>= flip whenJust spawn
            where conf = def
                           { gs_cellheight   = 40
                           , gs_cellwidth    = 200
                           , gs_cellpadding  = 6
                           , gs_originFractX = 0.5
                           , gs_originFractY = 0.5
                           , gs_font         = myFont
                           }

        myAppGrid = [ ("Emacs", "emacsclient -c -a emacs")
                    , ("Alacritty", "alacritty")
                    , ("PCManFM", "pcmanfm")
                    , ("Gimp", "gimp")
                    , ("LibreOffice Writer", "libreoffice --writer")
                    ]
        -- Named Scratchpads ---------------------------------------------------
        myScratchPads :: [NamedScratchpad]
        myScratchPads = [ NS "terminal" spawnTerm findTerm manageTerm
                        , NS "cmus" spawnCmus findCmus manageCmus
                        ]
          where
            spawnTerm = myTerminal ++ " -t scratchpad"
            findTerm = title =? "scratchpad"
            manageTerm = doCenterFloat

            spawnCmus = myTerminal ++ " -t cmus -e cmus"
            findCmus = title =? "cmus"
            manageCmus = doCenterFloat

        -- Key bindings. Add, modify or remove key bindings here. --------------
        -- START_KEYS
        myKeys :: [(String, X ())]
        myKeys =
                -- KB_GROUP Xmonad
                [ ("M-C-q", io (exitSuccess))
                -- KB_GROUP Helps
                , ("M-s s", spawn "~/.scripts/show_keybinds.sh")
                , ("M-s r", spawn "~/.scripts/ranger_keybinds.sh")
                -- KB_GROUP Hotkeys
                , ("M-b", spawn myBrowser)
                , ("M-r", spawn "rofi -show run")
                , ("M-f", spawn myFileBrowser)
                , ("M-<Return>", spawn myTerminal)
                , ("M-c", spawn "drink-coffee")
                , ("M-w", spawn "feh --randomize --bg-fill ~/.wallpapers/")
                , ("M-a", spawn "autorandr -c --force")
                , ("M-q", spawn (myTerminal ++ " -t hms -e ~/.scripts/backup.sh"))
                -- KB_GROUP Emacs
                , ("M-e e", spawn myEditor)
                , ("M-e <Space>", spawn "emacsclient --eval '(emacs-everywhere)'")
                -- KB_GROUP Music
                , ("M-u p", spawn "cmus-remote --play")
                , ("M-u j", spawn "cmus-remote --next")
                , ("M-u k", spawn "cmus-remote --prev")
                , ("M-u <Space>", spawn "cmus-remote --pause")
                , ("M-u r", spawn "cmus-remote --repeat")
                , ("M-u s", spawn "cmus-remote --shuffle")
                -- KB_GROUP GridSelect
                , ("C-g g", spawnSelected' myAppGrid)
                , ("C-g t", goToSelected $ mygridConfig myColorizer)
                , ("C-g b", bringSelected $ mygridConfig myColorizer)
                -- KB_GROUP Scratchpads
                , ("M-t t", namedScratchpadAction myScratchPads "terminal")
                , ("M-u u", namedScratchpadAction myScratchPads "cmus")
                -- KB_GROUP CLI Apps
                , ("M-t h", spawn (myTerminal ++ " -e htop"))
                , ("M-t r", spawn (myTerminal ++ " -e ranger ~"))
                , ("M-t b", spawn (myTerminal ++ " -e bluetoothctl"))
                -- KB_GROUP Clients
                , ("M-S-c", kill)
                , ("M-S-<Space>", sendMessage NextLayout)
                , ("M-m", sendMessage Mag.Toggle)
                --, ("M-S-<Space>", setLayout $ XMonad.layoutHook conf)
                , ("M-n", refresh)
                , ("M-<Tab>", windows W.focusDown)
                , ("M-j", windows W.focusDown)
                , ("M-k", windows W.focusUp)
                , ("M-S-j", windows W.swapDown)
                , ("M-S-k", windows W.swapUp)
                , ("M-h", sendMessage Shrink)
                , ("M-l", sendMessage Expand)
                -- , ("M-t", withFocused $ windows . W.sink)
                , ("M-,", sendMessage (IncMasterN (1)))
                , ("M-.", sendMessage (IncMasterN (-1)))
                -- KB_GROUP Multimedia
                , ("<XF86AudioMute>", spawn "amixer set Master toggle")
                , ("<XF86AudioLowerVolume>", spawn "amixer set Master 5%- unmute")
                , ("<XF86AudioRaiseVolume>", spawn "amixer set Master 5%+ unmute")
                , ("<XF86MonBrightnessUp>", spawn "brightnessctl s +5%")
                , ("<XF86MonBrightnessDown>", spawn "brightnessctl s 5%-")
                , ("<XF86Search>", spawn myBrowser)
                , ("<XF86Explorer>", spawn myFileBrowser)
                , ("<XF86LaunchA>", spawnSelected' myAppGrid)
                ]
                  where nonNSP = WSIs (return (\ws -> W.tag ws /= "NSP"))
                        nonEmptyNonNSP = WSIs (return (\ws -> isJust (W.stack ws) && W.tag ws /= "NSP"))
        --END_KEYS

        -- Mouse bindings: default actions bound to mouse events ---------------
        myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

            -- mod-button1, Set the window to floating mode and move by dragging
            [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                               >> windows W.shiftMaster))

            -- mod-button2, Raise the window to the top of the stack
            , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

            -- mod-button3, Set the window to floating mode and resize by dragging
            , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                               >> windows W.shiftMaster))

            -- you may also bind events to the mouse scroll wheel (button4 and button5)
            ]

        -- Layouts: -------------------------------------------------------------
        myLayout = smartSpacing 5 $ avoidStruts $ magnifierOff $ threeCol ||| threeColMid ||| tabbed ||| tall ||| Mirror tall ||| noBorders Full
          where
             -- default tiling algorithm partitions the screen into two panes
             tall = named "T" $ Tall nmaster delta ratio

             threeCol = named "3C" $ ThreeCol nmaster delta ratio

             threeColMid = named "3CM" $ ThreeColMid nmaster delta ratio

             tabbed = named "Tabs" $ simpleTabbed

             -- The default number of windows in the master pane
             nmaster = 1

             -- Default proportion of screen occupied by master pane
             ratio   = 1/2

             -- Percent of screen to increment by when resizing panes
             delta   = 3/100

        -- Window rules: -------------------------------------------------------
        myManageHook = composeAll
            [ className =? "MPlayer"                --> doFloat
            , className =? "Yad"                    --> doCenterFloat
            , className =? "Dialog"                 --> doCenterFloat
            , className =? "balena-etcher-electron" --> doCenterFloat
            , title     =? "scratchpad"             --> doCenterFloat
            , title     =? "hms"                    --> doCenterFloat
            , title     =? "system-update"          --> doCenterFloat
            , title     =? "system-upgrade"         --> doCenterFloat
            , title     =? "quit GIMP"              --> doCenterFloat
            , resource  =? "desktop_window"         --> doIgnore
            , resource  =? "kdesktop"               --> doIgnore
            , isFullscreen --> doFullFloat
            ] <+> namedScratchpadManageHook myScratchPads

        -- Event handling: -----------------------------------------------------

        -- * EwmhDesktops users should change this to ewmhDesktopsEventHook
        --
        -- Defines a custom handler function for X Events. The function should
        -- return (All True) if the default handler is to be run afterwards. To
        -- combine event hooks use mappend or mconcat from Data. Monoid.
        --
        myEventHook = mempty

        -- Startup hook: -------------------------------------------------------
        myStartupHook = do
                spawnOnce "udiskie &"
                spawnOnce "feh --randomize --bg-scale ~/.wallpapers/"

        -- Now run xmonad with all the defaults we set up. ---------------------

        main :: IO()
        main = do
          xmproc <- spawnPipe "xmobar"
          xmonad $ ewmh $ docks def
              {
              -- simple stuff
                terminal           = myTerminal,
                focusFollowsMouse  = myFocusFollowsMouse,
                clickJustFocuses   = myClickJustFocuses,
                borderWidth        = myBorderWidth,
                modMask            = myModMask,
                workspaces         = myWorkspaces,
                normalBorderColor  = myNormalBorderColor,
                focusedBorderColor = myFocusedBorderColor,

              -- key bindings
                mouseBindings      = myMouseBindings,

              -- hooks, layouts
                layoutHook         = myLayout,
                manageHook         = myManageHook,
                handleEventHook    = myEventHook,
                logHook            = dynamicLogWithPP $ namedScratchpadFilterOutWorkspacePP $ def
                    { ppOutput = \x -> hPutStrLn xmproc x
                    , ppCurrent = xmobarColor logHookPresentColor "" . wrap "[" "]"
                    , ppVisible = xmobarColor logHookVisibleColor ""
                    , ppHidden = xmobarColor logHookHiddenColor ""
              , ppHiddenNoWindows = xmobarColor logHookEmptyColor ""
                    , ppTitle = xmobarColor logHookTitleColor "" . shorten 60
                    , ppSep = "<fc=#${config.colorScheme.colors.base0E}> <fn=0>|</fn> </fc>"
                    , ppUrgent = xmobarColor logHookUrgentColor "" . wrap "!" "!"
              , ppExtras = [windowCount]
                    , ppOrder = \(ws:l:t:ex) -> [ws,l]++ex++[t]
                    },
                startupHook        = myStartupHook
            } `additionalKeysP` myKeys
      '';
    };

  };
}
